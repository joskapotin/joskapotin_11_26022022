{"version":3,"file":"static/js/370.75cfdd8d.chunk.js","mappings":"0MAGA,SAASA,IAAoC,IAAzBC,EAAwB,wDAC1C,GAAsCC,EAAAA,EAAAA,UAASD,GAA/C,eAAOE,EAAP,KAAoBC,EAApB,KAEA,SAASC,IACPD,GAAe,SAACE,GAAD,OAAWA,KAG5B,MAAO,CAACH,EAAaE,GAGvB,QAEAL,EAAWO,SAAW,CACpBN,eAAgBO,IAAAA,M,aCXlB,SAASC,EAAT,GAMI,IALFC,EAKC,EALDA,SACAC,EAIC,EAJDA,MAIC,IAHDC,MAAAA,OAGC,MAHO,qBAGP,MAFDC,UAAAA,OAEC,MAFW,GAEX,MADDC,KAEA,EAAyBd,OADxB,UACD,eAAOe,EAAP,KAAeV,EAAf,KACMW,EAAkBD,EAAS,iBAAmB,kBAC9CE,ECKK,WAGX,IAH0B,IAAdC,EAAc,uDAAP,GACfC,EAAK,GACLC,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWL,IAC3CA,KAAQ,CACb,IAAIM,EAAqB,GAAdJ,EAAMF,GAEfC,GADEK,EAAO,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,IAGV,OAAOL,EDpBaQ,GAEpB,OACE,qBACEd,UAAS,oBAAeD,EAAf,YAAwBC,GACjC,4BAAoBF,EAApB,UAFF,WAIE,mBACE,gBAAeI,EACf,gBAAeE,EACfJ,UAAS,4BAAuBG,GAChCY,QAASvB,EAJX,SAMGM,KAEH,gBACEE,UAAU,mBACVM,GAAIF,EACJY,KAAK,SACL,4BAAoBlB,EAApB,UAJF,UAME,iBAAKE,UAAU,qBAAf,WACE,eAAIM,GAAE,UAAKR,EAAL,UAAoBE,UAAU,mBAApC,SACGF,IAEFD,UAOX,QAEAD,EAAUF,SAAW,CACnBG,SAAUF,IAAAA,KAAAA,WACVG,MAAOH,IAAAA,OAAAA,WACPI,MAAOJ,IAAAA,OACPK,UAAWL,IAAAA,OACXsB,GAAItB,IAAAA,O,iFElDN,SAASuB,EAAT,GAAqC,IAAD,IAApBC,KAAAA,OAAoB,MAAb,GAAa,EAC5BC,EAAQ,CACZC,gBAAiB,OAFe,EAATC,MAEW,KAGpC,OACE,gBAAKtB,UAAU,OAAOoB,MAAOA,EAA7B,UACE,eAAIpB,UAAU,YAAd,SAA2BmB,MAKjC,QAEAD,EAAKxB,SAAW,CACdyB,KAAMxB,IAAAA,OACN2B,MAAO3B,IAAAA,OAAAA,a,iDCjBT,SAAS4B,EAAT,GAAiE,IAAjD1B,EAAgD,EAAhDA,SAAgD,IAAtCE,MAAAA,OAAsC,MAA9B,gBAA8B,EAAbC,EAAa,EAAbA,UACjD,OACE,iBAAMA,UAAS,eAAUD,EAAV,YAAmBC,GAAaM,GAAG,OAAlD,SACGT,IAKP,MAEA0B,EAAK7B,SAAW,CACdG,SAAUF,IAAAA,KAAAA,WACVI,MAAOJ,IAAAA,OACPK,UAAWL,IAAAA,S,kHC8Bb,MAvCA,WACE,OACE,UAAC4B,EAAA,EAAD,CAAMvB,UAAU,cAAhB,WACE,SAACkB,EAAA,EAAD,CAAMI,MAAOA,KACb,SAAC1B,EAAA,EAAD,CAAWE,MAAM,eAAjB,UACE,sOAMF,SAACF,EAAA,EAAD,CAAWE,MAAM,UAAjB,UACE,+MAMF,SAACF,EAAA,EAAD,CAAWE,MAAM,UAAjB,UACE,qMAMF,SAACF,EAAA,EAAD,CAAWE,MAAM,cAAjB,UACE,sd","sources":["utils/hooks/useToggler.jsx","components/Accordion/index.jsx","../node_modules/nanoid/index.browser.js","components/Hero/index.jsx","components/Main/index.jsx","pages/About/index.jsx"],"sourcesContent":["import PropTypes from 'prop-types'\r\nimport { useState } from 'react'\r\n\r\nfunction useToggler(defaultOnValue = false) {\r\n  const [isToggledOn, setIsToggledOn] = useState(defaultOnValue)\r\n\r\n  function toggle() {\r\n    setIsToggledOn((prev) => !prev)\r\n  }\r\n\r\n  return [isToggledOn, toggle]\r\n}\r\n\r\nexport default useToggler\r\n\r\nuseToggler.proptype = {\r\n  defaultOnValue: PropTypes.bool,\r\n}\r\n","import { nanoid } from 'nanoid'\r\nimport PropTypes from 'prop-types'\r\nimport useToggler from '../../utils/hooks/useToggler'\r\nimport './index.css'\r\n\r\nfunction Accordion({\r\n  children,\r\n  title,\r\n  theme = 'accordion--default',\r\n  className = '',\r\n  open = false,\r\n}) {\r\n  const [isOpen, toggle] = useToggler(open)\r\n  const statusClassName = isOpen ? 'accordion-open' : 'accordion-close'\r\n  const accordionId = nanoid()\r\n\r\n  return (\r\n    <section\r\n      className={`accordion ${theme} ${className}`}\r\n      aria-labelledby={`${title}-title`}\r\n    >\r\n      <button\r\n        aria-expanded={isOpen}\r\n        aria-controls={accordionId}\r\n        className={`accordion__button ${statusClassName}`}\r\n        onClick={toggle}\r\n      >\r\n        {title}\r\n      </button>\r\n      <div\r\n        className=\"accordion__panel\"\r\n        id={accordionId}\r\n        role=\"region\"\r\n        aria-labelledby={`${title}-title`}\r\n      >\r\n        <div className=\"accordion__content\">\r\n          <h2 id={`${title}-title`} className=\"accordion__title\">\r\n            {title}\r\n          </h2>\r\n          {children}\r\n        </div>\r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default Accordion\r\n\r\nAccordion.proptype = {\r\n  children: PropTypes.node.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  theme: PropTypes.string,\r\n  className: PropTypes.string,\r\n  on: PropTypes.bool,\r\n}\r\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import PropTypes from 'prop-types'\r\nimport './index.css'\r\n\r\nfunction Hero({ text = '', image }) {\r\n  const style = {\r\n    backgroundImage: 'url(' + image + ')',\r\n  }\r\n\r\n  return (\r\n    <div className=\"hero\" style={style}>\r\n      <h1 className=\"hero-text\">{text}</h1>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Hero\r\n\r\nHero.proptype = {\r\n  text: PropTypes.string,\r\n  image: PropTypes.string.isRequired,\r\n}\r\n","import PropTypes from 'prop-types'\r\n\r\nfunction Main({ children, theme = 'main--default', className }) {\r\n  return (\r\n    <main className={`main ${theme} ${className}`} id=\"main\">\r\n      {children}\r\n    </main>\r\n  )\r\n}\r\n\r\nexport default Main\r\n\r\nMain.proptype = {\r\n  children: PropTypes.node.isRequired,\r\n  theme: PropTypes.string,\r\n  className: PropTypes.string,\r\n}\r\n","import Main from '../../components/Main'\r\nimport Hero from '../../components/Hero'\r\nimport image from '../../assets/images/hero02.png'\r\nimport Accordion from '../../components/Accordion'\r\nimport './index.css'\r\n\r\nfunction About() {\r\n  return (\r\n    <Main className=\"about__page\">\r\n      <Hero image={image} />\r\n      <Accordion title=\"Fiabilité\">\r\n        <p>\r\n          Les annonces postées sur Kasa garantissent une fiabilité totale. Les\r\n          photos sont conformes aux logements, et toutes les informations sont\r\n          régulièrement vérifiées par nos équipes.\r\n        </p>\r\n      </Accordion>\r\n      <Accordion title=\"Respect\">\r\n        <p>\r\n          La bienveillance fait partie des valeurs fondatrices de Kasa. Tout\r\n          comportement discriminatoire ou de perturbation du voisinage\r\n          entraînera une exclusion de notre plateforme.\r\n        </p>\r\n      </Accordion>\r\n      <Accordion title=\"Service\">\r\n        <p>\r\n          Nos équipes se tiennent à votre disposition pour vous fournir une\r\n          expérience parfaite. N'hésitez pas à nous contacter si vous avez la\r\n          moindre question.\r\n        </p>\r\n      </Accordion>\r\n      <Accordion title=\"Securité\">\r\n        <p>\r\n          La sécurité est la priorité de Kasa. Aussi bien pour nos hôtes que\r\n          pour les voyageurs, chaque logement correspond aux critères de\r\n          sécurité établis par nos services. En laissant une note aussi bien à\r\n          l'hôte qu'au locataire, cela permet à nos équipes de vérifier que les\r\n          standards sont bien respectés. Nous organisons également des ateliers\r\n          sur la sécurité domestique pour nos hôtes.\r\n        </p>\r\n      </Accordion>\r\n    </Main>\r\n  )\r\n}\r\n\r\nexport default About\r\n"],"names":["useToggler","defaultOnValue","useState","isToggledOn","setIsToggledOn","toggle","prev","proptype","PropTypes","Accordion","children","title","theme","className","open","isOpen","statusClassName","accordionId","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","nanoid","onClick","role","on","Hero","text","style","backgroundImage","image","Main"],"sourceRoot":""}